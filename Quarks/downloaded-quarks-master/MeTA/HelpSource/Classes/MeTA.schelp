TITLE:: MeTA
summary:: A performance framework
categories:: performance framework
related:: Classes/Ndef


DESCRIPTION::

MeTA is part of the MeTA performance framework. It facilitates the integration of multiple software instruments ("generator"), external controllers ("controller") and their mapping ("mapping").
It also provides places for commonly used configurations ("config") and helpers.

MeTA is designed with the link::Classes/Ndef:: environment in mind, though it should be possible to use it with other paradigms as well.

To get started with MeTA, use the code::MeTA-install.scd:: script which will copy a barebone MeTA filestructure to a folder of your choice. Please refer to the code::README.md:: file for details.


MeTA was developed at the 3DMIN project. http://3dmin.org

CLASSMETHODS::

METHOD:: new
Create new MeTA object.

ARGUMENT:: path
the path to the structured MeTA directory

ARGUMENT:: server
the link::Classes/Server:: used for playing.


INSTANCEMETHODS::

METHOD:: guiWarnings
if code::true::, display GUI warnings, Otherwise supress them.



Most of the below methods are intended to provide detailed information on the setup's configuration.

subsection:: Paths

METHOD:: topDir
the path to the structured MeTA directory

METHOD:: fulldirnames
returns:: array of absolute paths to scripts.


METHOD:: dirnames
returns:: array of paths to scripts relative to link::#topDir::.


METHOD:: resourcesDir
returns:: path to resources relative to link::#topDir::.

METHOD:: samplesDir
returns:: path to samples directory relative to link::#topDir::.

METHOD:: sampleFormats
list of sample formats in the form code::[".wav", ".aiff"]:: (lower-case letters only).


subsection:: Important Objects

METHOD:: server
the link::Classes/Server:: used for playing sound.


subsection:: The Dictionaries

These dictionaries offer spaces in which one can sort functionality depending on its meaning within the performance setup.
Their use and contents are (apart from code::gens:: and code::aux::) solely in the hand of the user.
It proofed useful to keep e.g. generators apart from effect since it makes it easy to switch on/off all effects at once, or display them in a separate window.


METHOD:: config
dictionary for configurations. Examples are network configuration and server configuration as well as user-specific configurations.
This dictionary is intended for data only, additional functionality (i.e. helper functions to e.g. switch between  presets) should go to link::#utils::.


METHOD:: utils
dictionary for utility functions and their potential states. Examples are e.g. functions to switch between presets or instrument setups.

METHOD:: gens
dictionary for (sound-)generators. For now, link::Classes/Ndef::s are explicitely supported, other formats such as link::Classes/Tdef:: or link::Classes/Pdef:: may work as well.



METHOD:: helpers

dictionary for helpers, i.e. server-side link::Classes/Ndef::s that are not making sound by themselves (like machine listening devices or VCAs that are shared by multiple generators and should therefore be permanently executed).

METHOD:: samples

dictionary holding sample buffers loaded with link::#loadSamples::


METHOD:: maps

dictionary holding mapping functions


METHOD:: efx

dictionary holding non-AUX effects.

METHOD:: aux
dictionary for AUX-effects loaded via link::#loadAux::. For now, link::Classes/Ndef::s are explicitely supported.


METHOD:: ctls

dictionary for control elements like code::MKtl::'s (from the Modality toolkit) or custom GUIs.


METHOD:: views

dictionary for views, e.g. GUI displays.




subsection:: File handling


METHOD:: filePaths

ARGUMENT:: identifier
The category (determined by the folder it is located in). Should be one of
definitionlist::
## util
|| a utility
## config
|| a configuration file
## controller
|| an interface to a controller
## efx
|| effects
## engine
|| (sound) engine definition
## mapping
|| mapping directive
## resource
|| resource such as (audio) samples, images, or other data
## helper
|| helpers, tools, etc. for sounds and mapping (e.g. link::Classes/Ndef:: to compute Amplitudes etc.)
::

ARGUMENT:: docs
Array of document names without extension. Deliberately dis-allowing wildcards (it just got very messy and its usage error-prone).

ARGUMENT:: ext
The extension of the documents (e.g. code::scd::).

ARGUMENT:: warn
link::Classes/Boolean::, warn for non-existent Document.

returns:: sorted array of absolute paths



METHOD:: openFiles
opens the files for editing.

ARGUMENT:: identifier
The category (determined by the folder it is located in). Should be one of
definitionlist::
## util
|| a utility
## config
|| a configuration file
## controller
|| an interface to a controller
## efx
|| effects
## engine
|| (sound) engine definition
## mapping
|| mapping directive
## resource
|| resource such as (audio) samples, images, or other data
## helper
|| helpers, tools, etc. for sounds and mapping (e.g. link::Classes/Ndef:: to compute Amplitudes etc.)
::

ARGUMENT:: docs
Array of document names without extension. Deliberately dis-allowing wildcards.

ARGUMENT:: ext
The extension of the documents to be opened

ARGUMENT:: warn
link::Classes/Boolean::, warn for non-existent document.


METHOD:: loadFiles
load files. See also specific methods link::#loadAux:: and link::#loadGen::.

ARGUMENT:: identifier
The category (determined by the folder it is located in). Should be one of
definitionlist::
## util
|| a utility
## config
|| a configuration file
## controller
|| an interface to a controller
## efx
|| effects
## engine
|| (sound) engine definition
## mapping
|| mapping directive
## resource
|| resource such as (audio) samples, images, or other data
## helper
|| helpers, tools, etc. for sounds and mapping (e.g. link::Classes/Ndef:: to compute Amplitudes etc.)
::

ARGUMENT:: docs
Array of Document names without extension (deliberately fixed to ".scd").

ARGUMENT:: warn
link::Classes/Boolean::, warn for non-existent Document.

returns:: an array of the return values of the file loading routine (i.e. the return value of the last command in the file).




METHOD:: loadAux
Load an aux-effect from a file in code::efx/aux::.
A link::Classes/ProxySubmix:: is created automatically and all Gens available through link::#getNdefGens:: are connected to it.

ARGUMENT:: name
filename without extension (deliberately fixed to ".scd").

ARGUMENT:: numChans
number of channels of the aux-effect

ARGUMENT:: defaultInGain
initial gain for all connected gens.

returns:: the MeTA object.


METHOD:: loadGen
Load a (sound)generator from a file in the generators directory.

ARGUMENT:: name
filename without extension (fixed to ".scd").

ARGUMENT:: index
a unique index that may be used for addressing it. This is particularly useful to automatically map functionality to controllers like faderboxes.

returns:: the return value of the file loading routine (i.e. the return value of the last command in the file).



subsection:: Helpers

METHOD:: loadSamples
load a subtree of the sample directory to link::#samples::.

ARGUMENT:: relPath
the path to the subtree relative to link::#sampleDir::

ARGUMENT:: forceReload
if true, force reloading of samples.


METHOD:: selectGenerator
selects a (sound) generator based on its key by evaluating

list::
## code::\offFunc:: for every generator but the selected one
## code::\onFunc:: for the selected one
::

ARGUMENT:: genKey
the generator's key as given in link::#loadGen::




METHOD:: getNdefGens
returns:: all Ndef's known to the system as generator (loaded via link::#loadGen::).




subsection:: Informing

METHOD:: postServerOptions
posts currenly active server options.


METHOD:: warnWin
creates a warning window

ARGUMENT:: string
content of the window

ARGUMENT:: title
window title

METHOD:: loadedFiles
returns:: a dictionary of all loaded files.




























EXAMPLES::

